


' Set Jira API URL and credentials
url = "https://jira.maybank.com.my/rest/api/2/issue"
username = "80012664"
password = "Etiqa12"

' Create the JSON payload for creating a defect
jsonPayload = "{""fields"": {""project"": {""key"": ""TEST""},""summary"": ""Test Issue"",""description"": ""This is a test"",""issuetype"": {""name"": ""Bug""}}}"

' Set up the HTTP request to send the payload to Jira API
Set objHTTP = CreateObject("MSXML2.XMLHTTP")
objHTTP.Open "POST", url, False, username, password
objHTTP.setRequestHeader "Content-Type", "application/json"

' Send the request with the JSON payload
objHTTP.Send jsonPayload

' Check the response
If objHTTP.Status = 201 Then
    MsgBox "Defect created successfully!"
Else
    MsgBox "Error: " & objHTTP.Status & " " & objHTTP.StatusText
End If







The download of the specified resource has failed.


Line (15): "objHTTP.Send jsonPayload".




' Set Jira API URL and credentials
url = "https://jira.maybank.com.my/rest/api/2/myself"
username = "80012664"
password = "Etiqa12"

' Set up the HTTP request to send the GET request to Jira API
Set objHTTP = CreateObject("MSXML2.XMLHTTP")
objHTTP.Open "GET", url, False, username, password
objHTTP.setRequestHeader "Content-Type", "application/json"

' Send the GET request
objHTTP.Send

' Check the response
If objHTTP.Status = 200 Then
    ' Parse the response (JSON)
    Set jsonResponse = JsonConverter.ParseJson(objHTTP.responseText)
    
    ' Extract and display the timeZone from the response
    timeZone = jsonResponse("timeZone")
    
    ' Show the timeZone in a message box
    MsgBox "Your Jira timeZone is: " & timeZone
Else
    MsgBox "Error: " & objHTTP.Status & " " & objHTTP.StatusText
End If







' Set Jira API URL and credentials
url = "https://jira.maybank.com.my/rest/api/2/myself"
username = "80012664"
password = "Etiqa12"

' Create the HTTP request
Set objHTTP = CreateObject("MSXML2.XMLHTTP")

' Bypass SSL verification (not recommended for production)
objHTTP.setOption 2, 13056 ' Disables SSL verification (NOT RECOMMENDED)

' Set up the HTTP request to send the GET request to Jira API
objHTTP.Open "GET", url, False, username, password
objHTTP.setRequestHeader "Content-Type", "application/json"

' Send the GET request
objHTTP.Send

' Check the response
If objHTTP.Status = 200 Then
    ' Parse the response (JSON)
    Set jsonResponse = JsonConverter.ParseJson(objHTTP.responseText)
    
    ' Extract and display the timeZone from the response
    timeZone = jsonResponse("timeZone")
    
    ' Show the timeZone in a message box
    MsgBox "Your Jira timeZone is: " & timeZone
Else
    MsgBox "Error: " & objHTTP.Status & " " & objHTTP.StatusText
End If







' Set Jira API URL and credentials
url = "https://jira.maybank.com.my/rest/api/2/myself"
username = "80012664"
password = "Etiqa12"

' Create the HTTP request using ServerXMLHTTP for SSL options
Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP.6.0")

' Bypass SSL verification (not recommended for production)
objHTTP.setOption 2, 13056 ' Disables SSL certificate checks (NOT RECOMMENDED)

' Set up the HTTP request to send the GET request to Jira API
objHTTP.Open "GET", url, False, username, password
objHTTP.setRequestHeader "Content-Type", "application/json"

' Send the GET request
objHTTP.Send

' Check the response
If objHTTP.Status = 200 Then
    ' Parse the response (JSON)
    Set jsonResponse = JsonConverter.ParseJson(objHTTP.responseText)
    
    ' Extract and display the timeZone from the response
    timeZone = jsonResponse("timeZone")
    
    ' Show the timeZone in a message box
    MsgBox "Your Jira timeZone is: " & timeZone
Else
    MsgBox "Error: " & objHTTP.Status & " " & objHTTP.StatusText
End If












' Set Jira API URL and credentials
url = "https://jira.maybank.com.my/rest/api/2/myself"
username = "80012664"  ' Your Jira username
password = "your_api_token_here"  ' Use the API token instead of password

' Create the HTTP request using ServerXMLHTTP for better SSL handling
Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP.6.0")

' Bypass SSL verification (not recommended for production)
objHTTP.setOption 2, 13056 ' Disables SSL certificate checks (NOT RECOMMENDED)

' Encode credentials in Base64
credentials = username & ":" & password
Dim xmlBase64
Set xmlBase64 = CreateObject("MSXML2.DOMDocument.6.0")
xmlBase64.LoadXML("<Base64>" & credentials & "</Base64>")
encodedCredentials = xmlBase64.documentElement.text

' Set up the HTTP request
objHTTP.Open "GET", url, False
objHTTP.setRequestHeader "Authorization", "Basic " & encodedCredentials
objHTTP.setRequestHeader "Content-Type", "application/json"

' Send the GET request
objHTTP.Send

' Print the response regardless of the status code
MsgBox "HTTP Status: " & objHTTP.Status & vbCrLf & "Response: " & objHTTP.responseText










' Set Jira API URL and Personal Access Token
url = "https://jira.maybank.com.my/rest/api/2/issue"
username = "80012664"
accessToken = "your_personal_access_token"

' Create the JSON payload for creating a defect
jsonPayload = "{""fields"": {""project"": {""key"": ""TEST""},""summary"": ""Test Issue"",""description"": ""This is a test"",""issuetype"": {""name"": ""Bug""}}}"

' Create the HTTP request using ServerXMLHTTP to handle SSL options
Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP.6.0")

' Open the HTTP request and set headers
objHTTP.Open "POST", url, False, username, accessToken
objHTTP.setRequestHeader "Content-Type", "application/json"
objHTTP.setRequestHeader "Authorization", "Basic " & Base64Encode(username & ":" & accessToken)

' Bypass SSL verification (not recommended for production)
objHTTP.setOption 2, 13056 ' Disables SSL certificate checks

' Send the request with the JSON payload
objHTTP.Send jsonPayload

' Check the response
If objHTTP.Status = 201 Then
    MsgBox "Defect created successfully!"
Else
    MsgBox "Error: " & objHTTP.Status & " " & objHTTP.StatusText & vbCrLf & "Response: " & objHTTP.responseText
End If

' Function to encode credentials in Base64
Function Base64Encode(value)
    Dim objXML, objNode
    Set objXML = CreateObject("MSXML2.DOMDocument")
    Set objNode = objXML.createElement("Base64Data")
    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = Stream_StringToBytes(value)
    Base64Encode = objNode.text
End Function

' Function to convert a string to bytes
Function Stream_StringToBytes(value)
    Dim objStream
    Set objStream = CreateObject("ADODB.Stream")
    objStream.Type = 2 ' Text
    objStream.Mode = 3 ' Read/Write
    objStream.Open
    objStream.WriteText value
    objStream.Position = 0
    objStream.Type = 1 ' Binary
    Stream_StringToBytes = objStream.Read
    objStream.Close
    Set objStream = Nothing
End Function










' Set Jira API URL and Personal Access Token
url = "https://jira.maybank.com.my/rest/api/2/issue"
username = "80012664"
accessToken = "your_personal_access_token"

' Create the JSON payload for creating a defect
jsonPayload = "{""fields"": {""project"": {""key"": ""TEST""},""summary"": ""Test Issue"",""description"": ""This is a test"",""issuetype"": {""name"": ""Bug""}}}"

' Create the HTTP request using ServerXMLHTTP to handle SSL options
Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP.6.0")

' Open the HTTP request and set headers
objHTTP.Open "POST", url, False, username, accessToken
objHTTP.setRequestHeader "Content-Type", "application/json"
objHTTP.setRequestHeader "Authorization", "Basic " & Base64Encode(username & ":" & accessToken)

' Bypass SSL verification (not recommended for production)
objHTTP.setOption 2, 13056 ' Disables SSL certificate checks

' Send the request with the JSON payload
objHTTP.Send jsonPayload

' Check the response
If objHTTP.Status = 201 Then
    MsgBox "Defect created successfully!"
Else
    MsgBox "Error: " & objHTTP.Status & " " & objHTTP.StatusText & vbCrLf & "Response: " & objHTTP.responseText
End If

' Function to encode credentials in Base64
Function Base64Encode(value)
    Dim objXML, objNode
    Set objXML = CreateObject("MSXML2.DOMDocument")
    Set objNode = objXML.createElement("Base64Data")
    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = Stream_StringToBytes(value)
    Base64Encode = objNode.text
End Function

' Function to convert a string to bytes
Function Stream_StringToBytes(value)
    Dim objStream
    Set objStream = CreateObject("ADODB.Stream")
    objStream.Type = 2 ' Text
    objStream.Mode = 3 ' Read/Write
    objStream.Open
    objStream.WriteText value
    objStream.Position = 0
    objStream.Type = 1 ' Binary
    Stream_StringToBytes = objStream.Read
    objStream.Close
    Set objStream = Nothing
End Function
